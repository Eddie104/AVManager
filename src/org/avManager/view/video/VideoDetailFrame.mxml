<?xml version="1.0" encoding="utf-8"?>
<components:AVWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
					 xmlns:s="library://ns.adobe.com/flex/spark" 
					 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:components="org.avManager.view.components.*" width="1200" height="800" xmlns:video="org.avManager.view.video.*" xmlns:components1="org.libra.flex.spark.components.*">
	<fx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			import org.avManager.events.VideoEvent;
			import org.avManager.model.ClassificationManager;
			import org.avManager.model.VideoManager;
			import org.avManager.model.data.VideoData;
			import org.libra.log4a.Logger;
			import org.libra.utils.DateUtil;
			import org.libra.utils.text.RegExpUtil;
			import org.libra.utils.text.StringUtil;
			
			[Bindable]
			private var _videoData:VideoData;
			
			private var _videoID:String;
			
			public function set videoData(value:VideoData):void
			{
				if(value){
					value.initActress();
					_videoIDInput.text = value.videoID;
				}
				_videoData = value;
			}
			
			public function set videoDataID(val:String):void{
				if(val) _videoIDInput.text = val;
			}
			
			protected function onSearchHandler(event:MouseEvent):void
			{
				this._videoID = _videoIDInput.text;
				if(_videoID && _videoID.indexOf("-") != -1){
					_videoData = VideoManager.instance.createVideoID(_videoID);
					if(_videoData.needInsert || !_videoData.cover || !_videoData.coverSub){
						var urlLoader:URLLoader = new URLLoader();
						urlLoader.load(new URLRequest("http://www.javlibrary.com/cn/vl_searchbyid.php?keyword=" + _videoID));
						urlLoader.addEventListener(Event.COMPLETE, onSearchCompleted);
						urlLoader.addEventListener(IOErrorEvent.IO_ERROR, onSearchIOError);
					}
				}else{
					Alert.show("请输入正确格式的番号");
				}
			}
			
			private function onSearchIOError(event:IOErrorEvent):void
			{
				var urlLoader:URLLoader = event.target as URLLoader;
				urlLoader.removeEventListener(Event.COMPLETE, onSearchCompleted);
				urlLoader.removeEventListener(IOErrorEvent.IO_ERROR, onSearchIOError);
				Logger.error(event.text);
				Alert.show("暂无法从数据源网站获取数据，稍后再试！");
			}
			
			private function onSearchCompleted(event:Event):void
			{
				var urlLoader:URLLoader = event.target as URLLoader;
				urlLoader.removeEventListener(Event.COMPLETE, onSearchCompleted);
				urlLoader.removeEventListener(IOErrorEvent.IO_ERROR, onSearchIOError);
				this.getDataFromHtml(urlLoader.data);
			}
			
			private function getDataFromHtml(html:String):void
			{
				var a:Array;
				if(html.indexOf("搜寻没有结果") != -1){
					Alert.show("找不到该番号对应的影片信息,番号:" + _videoID);
				}else if(html.indexOf("识别码搜寻结果") != -1){
					// 此时可能有多个搜寻结果
					a = html.match(/<div class="video".*<\/a><\/div><\/div>/g);
					var ss:String = "<div class=\"id\">" + _videoID + "</div>";
					for each(var s:String in a){
						if(s.indexOf(ss) != -1){
							s = s.split("./?v=")[1].split("\" title")[0];
							var urlLoader:URLLoader = new URLLoader();
							urlLoader.load(new URLRequest("http://www.javlibrary.com/cn/?v=" + s));
							urlLoader.addEventListener(Event.COMPLETE, onSearchCompleted);
							urlLoader.addEventListener(IOErrorEvent.IO_ERROR, onSearchIOError);
							return;
						}
					}
					Alert.show("似乎找不到该番号对应的影片信息,番号:" + _videoID);
				}else{
					// 获取图片url
					a = html.match(/<img id="video_jacket_img".*<\/div>/);
					if(a && a.length){
						a = a[0].match(/http:\/\/.*jpg"/);
						_videoData.setCoverURL(a[0].replace("\"", ""))
					}
					
					// 获取影片名
					a = html.match(/<div id="video_title">.*<\/a><\/h3>/);
					if(a && a.length){
						this._videoData.name = RegExpUtil.removeHTMLTag(a[0]);					
					}
					
					// 获取番号
					this._videoData.videoID = getContentFromHtml("识别码", html);
					
					// 获取发行日期
					var dateAry:Array = getContentFromHtml("发行日期", html).split("-");
					this._videoData.date = new Date(dateAry[0], dateAry[1], dateAry[2]);
					
					// 获取类别
					var classificationAry:Array = getContentFromHtml("类别", html).split(" ");
					for each(var classification:String in classificationAry){
						if(classification){
							_videoData.addClassification(ClassificationManager.instance.createClassification(classification));							
						}
					}
					
					// 获取演员
					this._videoData.actress = getContentFromHtml("演员", html);
					
					// 获取制作商
//					this._spideringVideoData.maker = getContentFromHtml("制作商", html);
//					if(this._spideringVideoData.maker == "null"){
//						info += "\n无法获取制作商";
//					}
//					
//					// 获取发行商
//					this._spideringVideoData.publisher = getContentFromHtml("发行商", html);
//					if(this._spideringVideoData.publisher == "null"){
//						info += "\n无法获取发行商";
//					}
//					
//					// 获取导演
//					this._spideringVideoData.director = getContentFromHtml("导演", html);
//					if(this._spideringVideoData.director == "null"){
//						info += "\n无法获取导演";
//					}
					
					// 获取种子资源
					a = html.match(/\[url=http:\/\/.*url\]/g);
					if(a){
						var aa:Array;
						s = '';
						for(var i:int = 0;i < a.length;i++){
							aa = a[i].match(/http:\/\/\w*\.*\w+\.\w+\/[\w* .\/?\-%&=]*/);
							if(aa && aa.length){
								s += s ? " " + aa[0] : aa[0];
							}
						}
						this._videoData.torrent = s;
					}
					
					function getContentFromHtml(tag:String, html:String):String{
						var reg:String  ='<tr>\\s*.*' + tag + '.*\\s*.*\\s*.*\\s*</tr>';
						var arr:Array = html.match(new RegExp(reg,"g"));
						if(arr && arr.length){
							arr = arr[0].match(/<td class="text">.*<\/td>/);
							return StringUtil.trim(RegExpUtil.removeHTMLTag(arr[0], " ").replace(" &nbsp;", ""));
						}else{
							return "null";
						}
					}
				}
			}
			
			override protected function onCreationCompleteHandler(event:FlexEvent):void
			{
				super.onCreationCompleteHandler(event);
				_img.addEventListener(FlexEvent.READY, onImgLoaded);
			}
			
			
			protected function onImgLoaded(event:FlexEvent):void
			{
				this.dispatchEvent(new org.avManager.events.VideoEvent(org.avManager.events.VideoEvent.COVER_LOADED, _videoData));
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<s:HGroup width="100%" height="100%">
		<s:Scroller width="800" height="100%">
			<s:Group width="100%" height="100%">
				<s:Image id="_img" source="{_videoData.cover}"/>
			</s:Group>
		</s:Scroller>
		<s:VGroup width="100%" height="100%">
			<s:HGroup width="100%" height="24">
				<s:Label text="番号:" width="80" height="24" verticalAlign="middle"/>
				<s:TextInput width="100%" id="_videoIDInput"/>
				<s:Button label="搜索" click="onSearchHandler(event)"/>
			</s:HGroup>
			<s:HGroup width="100%" height="24">
				<s:Label text="影片名:" width="80" height="24" verticalAlign="middle"/>
				<s:Label text="{_videoData.name}" verticalAlign="middle" height="100%"/>
			</s:HGroup>
			<s:HGroup width="100%" height="24">
				<s:Label width="80" height="24" text="发行时间:" verticalAlign="middle"/>
				<s:Label text="{_videoData ? DateUtil.toString(_videoData.date) : null}" verticalAlign="middle" height="100%"/>
			</s:HGroup>
			<s:HGroup width="100%" height="24">
				<s:Label width="80" height="100%" text="艺术表演者:" verticalAlign="middle"/>
				<s:Label width="100%" height="100%" text="{_videoData.actress}" verticalAlign="middle"/>
			</s:HGroup>
			<mx:ToolBar width="100%" height="100%">
				<mx:Repeater id="_actressContainer" width="100%" height="100%" dataProvider="{_videoData.actressDataList}">
					<video:ActressContainer actressData="{_actressContainer.currentItem}" width="100" height="124"/>
				</mx:Repeater>
			</mx:ToolBar>
			<s:HGroup width="100%" height="24">
				<s:Label width="100%" height="100%" text="种子下载:" verticalAlign="middle"/>
			</s:HGroup>
			<mx:ToolBar width="100%" height="100%">
				<mx:Repeater id="_torrentContainer" width="100%" height="100%" dataProvider="{_videoData.torrentList}">
					<video:TorrentContainer torrentUrl="{_torrentContainer.currentItem}" width="100%" height="100%"/>
				</mx:Repeater>
			</mx:ToolBar>
		</s:VGroup>
	</s:HGroup>
</components:AVWindow>
