<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   width="1200" height="800" creationComplete="onCreationCompleteHandler(event)" xmlns:classification="org.avManager.view.classification.*"
					   closing="onCloseHandler(event)" xmlns:video="org.avManager.view.video.*" xmlns:actress="org.avManager.view.actress.*">
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.MenuEvent;
			
			import org.avManager.events.ClassificationEvent;
			import org.avManager.events.VideoClassificationEvent;
			import org.avManager.model.ActressManager;
			import org.avManager.model.ClassificationManager;
			import org.avManager.model.SQLiteManager;
			import org.avManager.model.VideoManager;
			import org.avManager.view.UIManager;
			import org.libra.log4a.Logger;
			
			private function onCreationCompleteHandler(event:FlexEvent):void
			{
				const appXML:XML = NativeApplication.nativeApplication.applicationDescriptor;
				var ns:Namespace = appXML.namespace();
				this.title = 'AVManager ' + String(appXML.ns::versionNumber);
				
				_videoPreviewContainer.addEventListener(VideoClassificationEvent.SELECTED, onVideoClassificationSelected);
				
				// 初始化视图
				UIManager.instance.init(this);
				
				UIManager.instance.showLoading(false, "开始初始化数据库");
				// 初始化数据
				SQLiteManager.instance.init(File.applicationDirectory.resolvePath("av.db"), this.onSqlInited);
			}
			
			private function onSqlInited():void{
				Logger.info("开始初始化ClassificationManager");
				UIManager.instance.showLoading(false, "开始初始化ClassificatioManager");
				ClassificationManager.instance.init(this.initActressManager);
			}
			
			private function initActressManager():void{
				Logger.info("开始初始化ActressManager");
				UIManager.instance.showLoading(false, "开始初始化ActressManager");
				ActressManager.instance.init(this.initVideoManager);
			}
			
			private function initVideoManager():void{
				Logger.info("开始初始化VideoManager");
				UIManager.instance.showLoading(false, "开始初始化VideoManager");
				VideoManager.instance.init(this.inited);
			}
			
			private function inited():void{
				Logger.info("所有Manager初始化完毕");
				UIManager.instance.closeLoading();
			}
			
			protected function onCloseHandler(event:Event = null):void
			{
				if(event) event.preventDefault();
				VideoManager.instance.save(saveClassification);
			}
			
			private function saveClassification():void{
				ClassificationManager.instance.save(saveActress);
			}
			
			private function saveActress():void{
				ActressManager.instance.save(exitApp);
			}
			
			private function exitApp():void{
				NativeApplication.nativeApplication.exit();
			}
			
			private function onMenuBarClicked(event:MenuEvent):void {
				this.doFun(event.item.@type.toString());
			}
			
			private function doFun(funName:String):void{
				switch(funName){
					case "newVideo":
						UIManager.instance.showVideoDetailFrame(null, null);
						break;
					case "newActress":
						UIManager.instance.showActressCreator();
						break;
					case "open":
						break;
					case "spiderAll":
						break;
					case "actressLib":
						break;
					case "about":
						UIManager.instance.showAbout();
						break;
					case "exit":
//						NativeApplication.nativeApplication.exit();
						onCloseHandler();
						break;
				}
			}
			
			private function onVideoClassificationSelected(event:VideoClassificationEvent):void
			{
				this._videoPreviewContainer.updateVideoList(VideoManager.instance.getVideoDataListByClassification(event ? event.classificationName : null));
			}
			
			private function onTabnavigatorChangeHandler(event:IndexChangedEvent):void
			{
				this.dispatchEvent(new ClassificationEvent(ClassificationEvent.SWITCH, event.newIndex));				
			} 
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<fx:XMLList id="menuData">
			<node label="文件">
				<node label="新建影片" type="newVideo"/>
				<node label="新建演员" type="newActress"/>
				<node type="separator"/>
				<node label="退出" type="exit"/>
			</node>
			<node label="编辑">
				<node label="批更新" type="spiderAll"/>
			</node>
			<node label="帮助">
				<node label="关于" type="about"/>
			</node>
		</fx:XMLList>		
		<fx:XMLList id="toolBarData">
			<node label="批更新" name="spiderAll"/>
			<node label="演员库" name="actressLib" />
		</fx:XMLList>
	</fx:Declarations>
	<s:VGroup id="_menuBar" width="100%" height="100%" horizontalAlign="left">
		<mx:MenuBar width="100%" height="30" change="onMenuBarClicked(event)"
					dataProvider="{menuData}" labelField="@label"/>
		<s:HGroup width="100%" height="100%">
			<mx:TabNavigator width="100%" height="100%" change="onTabnavigatorChangeHandler(event)">
				<s:NavigatorContent width="100%" height="100%" label="影片分类">
					<video:VideoPreviewContainer width="100%" height="100%" id="_videoPreviewContainer"/>
				</s:NavigatorContent>
				<s:NavigatorContent width="100%" height="100%" label="女优名鉴">
					<actress:ActressPreviewContainer width="100%" height="100%" id="_actressPreviewContainer"/>					
				</s:NavigatorContent>
			</mx:TabNavigator>
		</s:HGroup>
	</s:VGroup>
</s:WindowedApplication>